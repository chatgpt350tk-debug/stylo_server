# app.py
import os, csv, re
from flask import Flask, request, Response
from twilio.twiml.messaging_response import MessagingResponse

app = Flask(__name__)

# ----------------------------
# Basic health route (Render test)
# ----------------------------
@app.route("/health")
def health():
    return {"ok": True}

# ----------------------------
# Data paths
# ----------------------------
DATA_DIR = "data"
FAQ_PATH = os.path.join(DATA_DIR, "faq.csv")
CONTACTS_PATH = os.path.join(DATA_DIR, "contacts_prefs.csv")
ORDERS_PATH = os.path.join(DATA_DIR, "orders.csv")  # ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡ßé use (‡¶≤‡¶ó ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)

def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)

def ensure_faq():
    ensure_dirs()
    if not os.path.exists(FAQ_PATH):
        with open(FAQ_PATH, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["question","keywords","answer"])

def ensure_contacts():
    ensure_dirs()
    if not os.path.exists(CONTACTS_PATH):
        with open(CONTACTS_PATH, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f); w.writerow(["phone","salutation"])

def ensure_orders():
    ensure_dirs()
    if not os.path.exists(ORDERS_PATH):
        with open(ORDERS_PATH, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f); w.writerow(
                ["order_id","name","phone","address","code","size","qty","city","status"]
            )

# ----------------------------
# Salutation (Sir/Ma'am) memory
# ----------------------------
def get_saved_salutation(phone:str):
    ensure_contacts()
    with open(CONTACTS_PATH, newline="", encoding="utf-8") as f:
        for r in csv.DictReader(f):
            if (r.get("phone") or "").strip() == (phone or "").strip():
                return (r.get("salutation") or "").strip()
    return None

def save_salutation(phone:str, salutation:str):
    ensure_contacts()
    rows, seen = [], False
    with open(CONTACTS_PATH, newline="", encoding="utf-8") as f:
        for r in csv.DictReader(f):
            rows.append(r)
    for r in rows:
        if r["phone"].strip() == phone.strip():
            r["salutation"] = salutation
            seen = True
            break
    if not seen:
        rows.append({"phone":phone, "salutation":salutation})
    with open(CONTACTS_PATH, "w", newline="", encoding="utf-8") as f:
        w = csv.DictWriter(f, fieldnames=["phone","salutation"])
        w.writeheader()
        for r in rows: w.writerow(r)

def infer_salutation_from_text(text:str):
    q = (text or "").lower()
    if any(k in q for k in ["apu","apa","‡¶Ü‡¶™‡ßÅ","‡¶Ü‡¶™‡¶æ","‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ","ma'am","madam","‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ"]):
        return "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ"
    if any(k in q for k in ["vai","bhai","‡¶≠‡¶æ‡¶á","‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞","sir","‡¶¶‡¶æ‡¶¶‡¶æ"]):
        return "‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞"
    return None

def salutation_for_user(phone:str, text:str):
    saved = get_saved_salutation(phone)
    if saved: return saved, False
    inferred = infer_salutation_from_text(text)
    if inferred:
        save_salutation(phone, inferred)
        return inferred, False
    return None, True  # need to ask once

# ----------------------------
# FAQ + Small talk
# ----------------------------
def answer_from_faq(user_text: str):
    ensure_faq()
    if not os.path.exists(FAQ_PATH): return None
    txt = (user_text or "").strip().lower()
    with open(FAQ_PATH, newline="", encoding="utf-8") as f:
        for r in csv.DictReader(f):
            keys = [k.strip() for k in (r.get("keywords","") or "").lower().split(",") if k.strip()]
            if any(k in txt for k in keys):
                return (r.get("answer") or "").strip()
    return None

def small_talk(user_text: str):
    q = (user_text or "").strip().lower()
    hi = ["hi","hello","hey","‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ","‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã","‡¶π‡¶æ‡¶á","assalamu"]
    bad = ["bokachoda","‡¶ö‡ßã‡¶¶‡¶æ","‡¶´‡¶æ‡¶ï","bc","mc","‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞","‡¶ó‡¶æ‡¶≤‡¶ø"]
    if any(w in q for w in hi):
        return "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã üëã STYLO ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶≤‡¶õ‡¶ø! ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?"
    if any(w in q for w in bad):
        return "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶∑‡ßç‡¶ü‡¶ü‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø‚Äî‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶≤‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ì ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡•§ üôè"
    if "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶" in q or "thanks" in q or "thank you" in q:
        return "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶∞‡¶ì ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶æ‡¶ó‡¶≤‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶¨‡ßá‡¶®‡•§ üòä"
    return None

# ----------------------------
# Helpers: charge + simple order parse
# ----------------------------
def delivery_charge_for_city(city_text:str):
    # ‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß≠‡ß¶, ‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡ßß‡ß´‡ß¶
    t = (city_text or "").lower()
    dhaka_keys = ["dhaka","‡¶¢‡¶æ‡¶ï‡¶æ","mirpur","uttara","banani","dhanmondi","‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞","‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶æ","‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø","‡¶¨‡¶®‡¶æ‡¶®‡ßÄ","‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶®"]
    if any(k in t for k in dhaka_keys):
        return 70
    return 150

def parse_order_freeform(text: str):
    """
    ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶¨ ‡¶™‡¶æ‡¶†‡¶æ‡ßü‚Äî‡¶§‡¶æ ‡¶π‡¶≤‡ßá ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶≤ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡•§
    ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°: ‡¶®‡¶æ‡¶Æ, ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤/‡¶´‡ßã‡¶®, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ, ‡¶ï‡ßã‡¶°, ‡¶∏‡¶æ‡¶á‡¶ú, Qty/‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£/qty
    """
    q = (text or "")
    def find(pattern): 
        m = re.search(pattern, q, flags=re.IGNORECASE)
        return m.group(1).strip() if m else ""
    name = find(r"‡¶®‡¶æ‡¶Æ[:Ôºö]\s*([^\n,]+)")
    phone = find(r"(?:‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤|‡¶´‡ßã‡¶®)[:Ôºö]\s*([0-9+ \-]+)")
    address = find(r"(?:‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ|address)[:Ôºö]\s*([^\n]+)")
    code = find(r"(?:‡¶ï‡ßã‡¶°|code)[:Ôºö]\s*([A-Za-z0-9\-]+)")
    size = find(r"(?:‡¶∏‡¶æ‡¶á‡¶ú|size)[:Ôºö]\s*([A-Za-z0-9/]+)")
    qty = find(r"(?:qty|‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£|‡¶™‡¶ø‡¶∏)[:Ôºö]?\s*([0-9]+)")
    city_guess = "‡¶¢‡¶æ‡¶ï‡¶æ" if "‡¶¢‡¶æ‡¶ï‡¶æ" in address or "dhaka" in address.lower() else ""
    return {
        "name": name, "phone": phone, "address": address,
        "code": code, "size": size, "qty": qty or "1", "city": city_guess
    }

def format_order_summary(o: dict, price=None):
    lines = [
        f"‡¶®‡¶æ‡¶Æ: {o.get('name','')}",
        f"‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: {o.get('phone','')}",
        f"‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: {o.get('address','')}",
        f"‡¶ï‡ßã‡¶°: {o.get('code','')} | ‡¶∏‡¶æ‡¶á‡¶ú: {o.get('size','')} | Qty: {o.get('qty','1')}",
    ]
    if price:
        qty = int(o.get("qty","1") or "1")
        sub = price * qty
        chg = delivery_charge_for_city(o.get("address",""))
        total = sub + chg
        lines += [f"‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ: {sub}‡ß≥", f"‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø: {chg}‡ß≥", f"‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶≤: {total}‡ß≥ (COD)"]
    return "\n".join(lines)

# ----------------------------
# WhatsApp webhook
# ----------------------------
@app.route("/twilio/whatsapp", methods=["POST"])
def whatsapp_webhook():
    body = (request.values.get("Body") or "").strip()
    from_num = (request.values.get("From") or "").strip()
    resp = MessagingResponse()

    # salutation (sir/ma'am) memory
    sal, need_to_ask = salutation_for_user(from_num, body)
    def greet_prefix(): return f"{sal} " if sal else ""

    # if not known, ask once
    if need_to_ask and not any(k in body.lower() for k in ["‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞","‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ","sir","madam","‡¶Ü‡¶™‡ßÅ","‡¶≠‡¶æ‡¶á"]):
        resp.message("‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶¨‡ßã? ‚Äò‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‚Äô ‡¶®‡¶æ ‚Äò‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ‚Äô ‚Äî ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶ø‡¶® üôÇ")
        return Response(str(resp), mimetype="application/xml")

    # user chooses salutation now
    if any(k in body.lower() for k in ["‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞","‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ","sir","madam"]):
        choice = "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ" if ("‡¶Æ‡ßç‡¶Ø‡¶æ‡¶Æ" in body.lower() or "madam" in body.lower()) else "‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞"
        save_salutation(from_num, choice)
        resp.message(f"‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá **{choice}** ‡¶¨‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶¨‡•§ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?")
        return Response(str(resp), mimetype="application/xml")

    # showroom/address quick intent
    showroom_keys = ["‡¶∂‡ßã‡¶∞‡ßÅ‡¶Æ","‡¶¶‡ßã‡¶ï‡¶æ‡¶®","‡¶∂‡¶™","‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ","‡¶è‡¶°‡ßç‡¶∞‡ßá‡¶∏","address","location","‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®"]
    if any(k in body.lower() for k in showroom_keys):
        resp.message(greet_prefix() + "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶´‡¶ø‡¶ú‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶∂‡ßã‡¶∞‡ßÅ‡¶Æ ‡¶®‡ßá‡¶á‚Äî**STYLO ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï**‡•§ ‡¶¢‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡ß≠‡ß¶‡ß≥, ‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡ßß‡ß´‡ß¶‡ß≥‡•§ ‡¶™‡¶ø‡¶ï‡¶Ü‡¶™ ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®, ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡•§")
        return Response(str(resp), mimetype="application/xml")

    # ORDER FLOW (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞' ‡¶¨‡¶≤‡¶≤‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∂‡ßá‡ßü‡¶æ‡¶∞)
    if any(k in body.lower() for k in ["‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞", "order", "‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á", "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á"]) and "‡¶®‡¶æ‡¶Æ:" not in body:
        msg = (
            greet_prefix() + "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶á ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n"
            "‡¶®‡¶æ‡¶Æ: ...\n‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: ...\n‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: ...\n‡¶ï‡ßã‡¶°: ...\n‡¶∏‡¶æ‡¶á‡¶ú: ...\nQty: 1\n"
            "‡¶â‡¶¶‡¶æ: ‡¶®‡¶æ‡¶Æ: ‡¶∞‡¶´‡¶ø‡¶ï, ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: 017..., ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: ‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞, ‡¶ï‡ßã‡¶°: DR-1050, ‡¶∏‡¶æ‡¶á‡¶ú: L, Qty: 1"
        )
        resp.message(msg)
        return Response(str(resp), mimetype="application/xml")

    # If user already sent formatted order
    if "‡¶®‡¶æ‡¶Æ:" in body and "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤" in body and ("‡¶ï‡ßã‡¶°:" in body or "code:" in body.lower()):
        ensure_orders()
        o = parse_order_freeform(body)
        # demo: dummy price lookup (‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶≤‡¶ó ‡¶≤‡¶æ‡¶ó‡¶æ‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßú‡¶¨‡ßá)
        dummy_price = 1050 if o.get("code") else None
        summary = format_order_summary(o, price=dummy_price)
        # (‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá/CSV ‡¶§‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡ßá‡¶¨‡ßá)
        resp.message(greet_prefix() + "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏:\n" + summary + "\n\n‚úîÔ∏è ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶¨, ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!")
        return Response(str(resp), mimetype="application/xml")

    # FAQ
    faq_ans = answer_from_faq(body)
    if faq_ans:
        resp.message(greet_prefix() + faq_ans)
        return Response(str(resp), mimetype="application/xml")

    # Small talk
    st = small_talk(body)
    if st:
        resp.message(greet_prefix() + st)
        return Response(str(resp), mimetype="application/xml")

    # Default fallback
    resp.message(
        greet_prefix()
        + "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã üëã STYLO ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶≤‡¶õ‡¶ø! ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶≤‡ßá ‡¶¶‡¶æ‡¶Æ/‡¶∏‡ßç‡¶ü‡¶ï ‡¶¨‡¶≤‡¶¨‡•§\n"
          "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá: ‡¶®‡¶æ‡¶Æ/‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤/‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ/‡¶ï‡ßã‡¶°/‡¶∏‡¶æ‡¶á‡¶ú/Qty ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶ø‡¶®‡•§\n"
          "‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‚Äî‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø, ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú, ‡¶∏‡¶æ‡¶á‡¶ú, ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§"
    )
    return Response(str(resp), mimetype="application/xml")


# ----------------------------
# (Optional) Facebook Messenger webhook skeleton
# ----------------------------
# NOTE: Messenger ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç FB tokens env ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶¨‡ßá‡•§
# import requests
# @app.route('/facebook', methods=['GET','POST'])
# def facebook_webhook():
#     if request.method == 'GET':
#         verify = os.getenv("FB_VERIFY_TOKEN", "stylo_fb_verify")
#         mode = request.args.get("hub.mode")
#         token = request.args.get("hub.verify_token")
#         challenge = request.args.get("hub.challenge")
#         if mode == "subscribe" and token == verify:
#             return challenge, 200
#         return "Verification failed", 403
#     data = request.get_json(force=True)
#     # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá data ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶®‡¶ø‡ßü‡ßá answer_from_faq/small_talk/‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá
#     # send_facebook_message() ‡¶¶‡¶ø‡ßü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá‡•§
#     return "EVENT_RECEIVED", 200


if __name__ == "__main__":
    # ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    app.run(host="0.0.0.0", port=10000)
